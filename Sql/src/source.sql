-- Drop and create MAISON_DB
DROP DATABASE IF EXISTS MAISON_DB;
CREATE DATABASE MAISON_DB;

-- Use MAISON_DB for the following operations
USE MAISON_DB;

-- ==== Cities == Table Creation ====

CREATE TABLE `Cities`
(
    zipcode   INT PRIMARY KEY,
    place     VARCHAR(255),
    province  VARCHAR(255),
    latitude  INT NOT NULL, -- stored as ×10000, invisible to backend
    longitude INT NOT NULL, -- stored as ×10000, invisible to backend
    UNIQUE KEY place_province (place, province)
);

-- ==== Users == Table Creation ====

CREATE TABLE `Users`
(
    userId        BIGINT PRIMARY KEY,                  -- generated by backend (uuid to long)
    userFirstName VARCHAR(128),                        -- Some users may not have a first name
    userLastName  VARCHAR(128),                        -- Some users may not have a last name
    userName      VARCHAR(255) UNIQUE NOT NULL,        -- must be unique
    email         VARCHAR(255) UNIQUE NOT NULL,        -- must be unique, for login (always lowercase)
    avatarUrl     VARCHAR(255),                        -- URL to the avatar image, null if not set
    passwordHash  VARCHAR(255)        NOT NULL,        -- hashed password
    gender        BOOLEAN,                             -- 0 for male, 1 for female, null if not set
    birthDate     DATE,                                -- null if not set
    createdAt     TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- account creation time
    loginTime     TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    lastLoginTime TIMESTAMP DEFAULT NULL               -- last login time
);

-- ==== Categories == Table Creation ====

CREATE TABLE `Categories`
(
    catId INT AUTO_INCREMENT PRIMARY KEY, -- catId auto-incremented, always > 0
    name  VARCHAR(64) UNIQUE NOT NULL     -- Category name, must be unique
) AUTO_INCREMENT = 1;

-- ==== Provider-related Tables == Table Creation ====

-- ProviderCertificates table
CREATE TABLE `ProviderCertificates`
(
    certificateId BIGINT AUTO_INCREMENT PRIMARY KEY, -- certificateId auto-incremented, always > 0
    fileUrl       VARCHAR(255)                       -- URL to the certificate file
) AUTO_INCREMENT = 1;


-- ProviderApplications table
CREATE TABLE `ProviderApplications`
(
    applicationId BIGINT AUTO_INCREMENT PRIMARY KEY,                          -- applicationId auto-incremented, always > 0
    userId        BIGINT NOT NULL,                                            -- Foreign key to `Users` table
    catId         INT    NOT NULL,                                            -- Foreign key to `Categories` table
    description   TEXT,                                                       -- Application description
    cityZipcode   INT    NOT NULL,                                            -- foreign key to Cities table, optional, can be null
    status        ENUM ('PENDING', 'APPROVED', 'REJECTED') DEFAULT 'PENDING', -- Application status
    FOREIGN KEY (userId) REFERENCES `Users` (userId),
    FOREIGN KEY (catId) REFERENCES `Categories` (catId),
    FOREIGN KEY (cityZipcode) REFERENCES Cities (zipcode)
) AUTO_INCREMENT = 1;

-- ProviderCertificates associated with ProviderApplications
CREATE TABLE `ProviderApplicationCertificates`
(
    applicationId BIGINT NOT NULL, -- Foreign key to `ProviderApplications` table
    certificateId BIGINT NOT NULL, -- Foreign key to `ProviderCertificates` table
    PRIMARY KEY (applicationId, certificateId),
    FOREIGN KEY (applicationId) REFERENCES `ProviderApplications` (applicationId),
    FOREIGN KEY (certificateId) REFERENCES `ProviderCertificates` (certificateId)
);

-- ProviderLabels table
CREATE TABLE `ProviderLabels`
(
    labelId BIGINT AUTO_INCREMENT PRIMARY KEY, -- labelId auto-incremented, always > 0
    name    VARCHAR(64) UNIQUE NOT NULL        -- Label name, must be unique
) AUTO_INCREMENT = 1;

-- ProviderInfos: table to check if user is a provider
CREATE TABLE `ProviderInfos`
(
    providerId     BIGINT PRIMARY KEY,                  -- Foreign key to `Users` table
    catId          INT UNIQUE NOT NULL,                 -- Foreign key to `Categories` table
    description    TEXT,                                -- Application description
    serviceOffered TEXT,                                -- Detailed services as a JSON string
    cityZipcode    INT        NOT NULL,                 -- foreign key to Cities table, optional, can be null
    serviceArea    TEXT,                                -- Service area as a descriptive text
    priceRange     VARCHAR(64),                         -- Price range as a string
    authorizedAt   TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Time when the provider was authorized
    FOREIGN KEY (providerId) REFERENCES `Users` (userId),
    FOREIGN KEY (catId) REFERENCES `Categories` (catId),
    FOREIGN KEY (cityZipcode) REFERENCES Cities (zipcode)
) AUTO_INCREMENT = 1;

-- ProviderLabels associated with ProviderInfos
CREATE TABLE `ProviderInfoLabels`
(
    providerId BIGINT NOT NULL,        -- Foreign key to `ProviderInfos` table
    labelId    BIGINT NOT NULL UNIQUE, -- Foreign key to `ProviderLabels` table
    PRIMARY KEY (providerId, labelId),
    FOREIGN KEY (providerId) REFERENCES `ProviderInfos` (providerId),
    FOREIGN KEY (labelId) REFERENCES `ProviderLabels` (labelId)
);


-- ==== Task and Order Tables == Table Creation ====

-- Tasks table
CREATE TABLE `Tasks`
(
    taskId          BIGINT PRIMARY KEY,                                                                -- generated by backend (uuid to long)
    customerId      BIGINT       NOT NULL,                                                             -- Foreign key to `Users` table
    title           VARCHAR(128) NOT NULL,                                                             -- Task title
    catId           INT          NOT NULL,                                                             -- Foreign key to `Categories` table
    frequency       ENUM ('ONCE', 'DAILY', 'WEEKLY', 'MONTHLY')             DEFAULT 'ONCE',            -- Task frequency
    cityZipcode     INT          NOT NULL,                                                             -- foreign key to Cities table
    startTime       TIMESTAMP    NOT NULL,                                                             -- Task start time
    endTime         TIMESTAMP    NOT NULL,                                                             -- Task end time
    address         VARCHAR(255) NOT NULL,                                                             -- Task address
    budget          INT          NOT NULL,                                                             -- Task budget in cents
    customerContact TEXT         NOT NULL,                                                             -- Customer contact information
    description     TEXT         NOT NULL,                                                             -- Task description
    status          ENUM ('PENDING', 'CONFIRMED', 'COMPLETED', 'CANCELLED') DEFAULT 'PENDING',
    createdAt       TIMESTAMP                                               DEFAULT CURRENT_TIMESTAMP, -- Task creation time
    FOREIGN KEY (customerId) REFERENCES `Users` (userId),
    FOREIGN KEY (catId) REFERENCES `Categories` (catId),
    FOREIGN KEY (cityZipcode) REFERENCES `Cities` (zipcode)
);

-- Order table
CREATE TABLE `Orders`
(
    orderId     BIGINT PRIMARY KEY,                  -- Foreign key to `Tasks` table
    providerId  BIGINT NOT NULL,                     -- Foreign key to `ProviderInfos` table, ensures the provider is authorized
    confirmedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Order confirmation time
    FOREIGN KEY (orderId) REFERENCES `Tasks` (taskId),
    FOREIGN KEY (providerId) REFERENCES `ProviderInfos` (providerId)
);

-- Review table
CREATE TABLE Reviews
(
    orderId    BIGINT PRIMARY KEY, -- Foreign key to `Orders` table, ensures the review is linked to an order
    ranking    INT,
    reviewText TEXT,
    FOREIGN KEY (orderId) REFERENCES `Orders` (orderId)
);

-- ==== Chat Tables == Table Creation ====

-- Conversation table
CREATE TABLE `Conversations`
(
    chatId  BIGINT PRIMARY KEY AUTO_INCREMENT, -- chatId auto-incremented, always > 0
    user1Id BIGINT,
    user2Id BIGINT,
    FOREIGN KEY (user1Id) REFERENCES `Users` (userId),
    FOREIGN KEY (user2Id) REFERENCES `Users` (userId)
) AUTO_INCREMENT = 1;

CREATE TABLE `ChatMessages`
(
    messageId   BIGINT PRIMARY KEY AUTO_INCREMENT,   -- messageId auto-incremented, always > 0
    chatId      BIGINT  NOT NULL,                    -- Foreign key to `Conversations` table
    sentByUser1 BOOLEAN NOT NULL,                    -- true if sent by user1, false if sent by user2
    content     TEXT    NOT NULL,                    -- Message content
    sentTime    TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Message sent time
    FOREIGN KEY (chatId) REFERENCES `Conversations` (chatId)
) AUTO_INCREMENT = 1;

CREATE TABLE `NoticeMessages`
(
    noticeId BIGINT AUTO_INCREMENT PRIMARY KEY,                      -- noticeId auto-incremented, always > 0
    userId   BIGINT,                                                 -- Receiver, null for system-wide notices
    title    VARCHAR(64) NOT NULL,                                   -- Notice title
    content  TEXT        NOT NULL,                                   -- Message content
    type     ENUM ('NOTICE', 'SYSTEM', 'WARNING')  DEFAULT 'NOTICE', -- Notice type
    sentTime TIMESTAMP                             DEFAULT CURRENT_TIMESTAMP,
    targets  ENUM ('ALL', 'PROVIDERS', 'PERSONAL') DEFAULT 'ALL'     -- Target audience
) AUTO_INCREMENT = 1;

-- ==== Multilingual Support Tables == Table Creation ====

CREATE TABLE `MultilingualTags`
(
    id       BIGINT PRIMARY KEY AUTO_INCREMENT,
    tag      VARCHAR(128)                                                    NOT NULL,
    language ENUM ('ENGLISH', 'CHINESE_MANDARIN', 'JOSEONJOK_MAL', 'FRENCH') NOT NULL,
    content  TEXT                                                            NOT NULL,
    UNIQUE (tag, language)
);
